import logging
from aiogram import Router, types, F
from aiogram.filters.command import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config import TOKEN_URL
from db import async_session_maker, User
from db.models import YandexDiskFolder
from yandex import YandexFunctions
from .callbacks import start_callback
from .keyboards import registerbutton

async def help_command(message: types.Message):
    help_str = """–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫–∞</i></b>
    üí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>/start</b>
    üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>"""
    logging.info(f"user {message.from_user.id} asked for help")
    await message.reply(text=help_str, parse_mode="HTML")

async def get_user(session: AsyncSession, user_id: int):
    return await session.get(User, user_id)

async def status_command(message: types.Message):
    async with async_session_maker() as session:
        user = await get_user(session, message.from_user.id)
    if user:
        text = f"""<b>–í–∞—à–µ –∏–º—è</b>: <i>{user.name}</i>\n<b>–í–∞—à ID</b>: <i>{user.id}</i>\n"""
        await message.reply(text=text, parse_mode="HTML")
    else:
        await message.reply(text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    logging.info(f"user {message.from_user.id} requested status")

async def start_command(message: types.Message):
    async with async_session_maker() as session:
        user = await get_user(session, message.from_user.id)
    if user:
        await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=registerbutton)
    logging.info(f"user {message.from_user.id} started the bot")

async def register_user_command(message: types.Message):
    teacher_id = int(message.text)
    async with async_session_maker() as session:
        teacher = await get_user(session, teacher_id)
        if not teacher:
            await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            new_user = User(id=message.from_user.id, user_teacher_id=teacher_id, name=message.from_user.username)
            session.add(new_user)
            await session.commit()
            await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å")
    logging.info(f"user {message.from_user.id} registered as a student")

async def register_command(message: types.Message):
    text = (f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º:\n"
            f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href=\"{TOKEN_URL}\">{TOKEN_URL}</a>\n"
            f"2. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å.\n"
            f"3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¢–û–ö–ï–ù –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ <b>/token –¢–û–ö–ï–ù</b>.")
    await message.reply(text=text, parse_mode="HTML")
    logging.info(f"user {message.from_user.id} requested token registration instructions")

async def token_command(message: types.Message):
    async with async_session_maker() as session:
        user = await get_user(session, message.from_user.id)
        if not user:
            await message.reply("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        elif user.user_teacher_id:
            await message.reply("–í—ã –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        else:
            message_split = message.text.split()
            if len(message_split) < 2:
                await message.reply(f"{user.token}" if user.token else "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª /token")
            else:
                token = message_split[1].strip()
                client = YandexFunctions(token=token)
                if await client.check_token():
                    user.token = token
                    await session.commit()
                    await message.reply(f"–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    await message.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
    logging.info(f"user {message.from_user.id} requested token command")

async def add_command(message: types.Message):
    async with async_session_maker() as session:
        message_split = message.text.split()
        if len(message_split) < 2:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /add")
        else:
            name = message_split[1].strip()
            user = await get_user(session, message.from_user.id)
            if not user:
                await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            elif user.user_teacher_id:
                await message.reply("–í—ã –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            elif not user.token:
                await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
            else:
                new_folder = YandexDiskFolder(user_teacher_id=user.id, name=name)
                session.add(new_folder)
                await session.commit()
                await message.reply(f"–ü–∞–ø–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logging.info(f"user {message.from_user.id} asked for added a folder")

async def delete_command(message: types.Message):
    async with async_session_maker() as session:
        message_split = message.text.split()
        if len(message_split) < 2:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /delete")
        else:
            name = message_split[1].strip()
            user = await get_user(session, message.from_user.id)
            if not user:
                await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            elif user.user_teacher_id:
                await message.reply("–í—ã –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            elif not user.token:
                await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
            else:
                stmt = select(YandexDiskFolder).filter(YandexDiskFolder.user_teacher_id == user.id, YandexDiskFolder.name == name)
                result = await session.execute(stmt)
                folder = result.scalars().first()
                if not folder:
                    await message.reply("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    await session.delete(folder)
                    await session.commit()
                    await message.reply(f"–ü–∞–ø–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞")
    logging.info(f"user {message.from_user.id} asked for deleted a folder")

def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(start_command, Command(commands=["start"]))
    router.message.register(register_command, Command(commands=["register"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.message.register(token_command, Command(commands=["token"]))
    router.message.register(help_command, Command(commands=["help"]))
    router.message.register(add_command, Command(commands=["add"]))
    router.message.register(delete_command, Command(commands=["delete"]))
    router.message.register(register_user_command)
    router.callback_query.register(start_callback, F.data.startswith("reg_"))
