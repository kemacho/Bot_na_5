__all__ = [
    "register_message_handler",
]


import logging
from aiogram import Router, F
from aiogram import types
from aiogram.filters.command import Command
from sqlalchemy import select, insert
from sqlalchemy.ext.asyncio import AsyncSession
from db import async_session_maker, User
from .keyboards import keyboard_continue
from .callbacks import callback_continue


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


# help_command
help_str = """
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>–ë–û–¢ ‚Ññ5</i></b>\n
üí¨ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É <b>/help</b>\n
üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>\n
üí¨ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/register</b>
"""


async def help_command(message: types.Message):
    """—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    async with async_session_maker() as session:
        session: AsyncSession
        query = select(User).where(User.user_id == message.from_user.id)
        user_exit = await session.execute(query)

        if user_exit.scalars().all():
            await message.reply(text=help_str, parse_mode="HTML")
            logging.info(f"user {message.from_user.id} asks for help")

        else:
            new_user = {
                "user_id": message.from_user.id,
                "username": message.from_user.username
            }
            stmt = insert(User).values(**new_user)
            await session.execute(stmt)
            await session.commit()
            await message.reply(help_str)
            logging.info(f"register new user: {message.from_user.id}")


async def status_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async with async_session_maker() as session:
        session: AsyncSession
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        await message.reply(text=f"<b>User ID</b>: <i>{user.user_id}</i>\n"
                                 f"<b>User name</b>: <i>{user.username}</i>",
                                 parse_mode="HTML")
        logging.info(f"user {message.from_user.id} is asking for status")

    await message.reply("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard_continue)


def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(help_command, Command(commands=["start", "help"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.callback_query.register(callback_continue, F.data.startswith("continue_"))
